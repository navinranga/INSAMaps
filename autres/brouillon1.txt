import java.sql.SQLOutput;
import java.util.ArrayList;
import java.util.Vector;
import java.util.*;

public class Dijkstra {

	// creation du graphe
	public static final int INFINITE = 1000;//Integer.MAX_VALUE;
	public final static int ALPHA_NOTDEF = -999;// on met final psk c'est une constante
	private int x0;
	private int[] S;//ensemble de sommets dont les distances les plus courtes à la source sont connues au départ seulement Source
	private int[] R;//ensemble des prédécesseur des sommets de 0 à N-1;
	private Graphe g0;
	private int[] D;//tableau des valeurs du meilleur raccourci pour se rendre à chaque sommet
	// rajout
	private boolean[] noeudsMarqués;
	private static int dimMatr;//je rajoute ça pour simplifier le code.
	String[] nomDest;
	private int[][][] matCoordX;
	private int[][][] matCoordY;

	int[][][] coordXSuite;
	int[][][] coordYSuite;

	int[] coordXaRenvoyer;
	int[] coordYaRenvoyer;
	LinkedList<LinkedList<Integer>> listX ;
	LinkedList<LinkedList<Integer>> listY;



	public Dijkstra(int x, Graphe g, int[][][] matCoordXAffect, int[][][] matCoordYAffect) {
		x0 = x;
		g0 = g;
		dimMatr = g0.nbSommet();
		S = new int[dimMatr];//sommets atteints
		D = new int[dimMatr];//distances
		noeudsMarqués = new boolean[dimMatr];
		R = new int[dimMatr];
		calculePlusCourtChemin();
		this.nomDest = g0.nomDest;
		this.matCoordX = matCoordXAffect;
		this.matCoordY = matCoordYAffect;
	}

	public void calculePlusCourtChemin() {
		int n = 0;
		for (int a = 0; a < dimMatr; a++) {
			noeudsMarqués[a] = false;
			S[a] = -1; //en supposant qu'on numérote les sommets de 0 ou de 1 à n.
			R[a] = -1; // pour les noeuds qui n'ont pas de prédecésseur
		}

		S[n] = x0;
		D[x0] = 0;
		R[x0] = x0;
		initDistMin();
		for (int i = 0; i < dimMatr; i++) {
			if (!contains(S, i)) {// à revoir
				int t = choixSommet();
				noeudsMarqués[t] = true;
				n++;
				S[n] = t;
				majDistMin(t);
			} //end if
		}//end for
		/*
		for (int i=0; i<dimMatr;i++){
			System.out.print(" S["+i+"]="+S[i]);
		}
		System.out.println();
		for (int i=0; i<dimMatr;i++){
			System.out.print(" R["+i+"]="+R[i]);
		}
		System.out.println();*/
	}

	//implémentation de initDistMin
	private void initDistMin() {
		noeudsMarqués[x0] = true;
		for (int i = 0; i < dimMatr; i++) {
			if (g0.existeArc(x0, i)) {
				D[i] = g0.getU()[x0][i];
				R[i] = x0;
			} else {
				if (x0 != i)
					D[i] = -g0.ALPHA_NOTDEF + 1;
			}
		}
	}

	private void majDistMin(int n) {
		for (int i = 0; i < dimMatr; i++) {
			if (!contains(S, i)) {
				//D[i] = min(D[i], D[n] + distanceDsGraphe(n,i));
				if (D[n] + distanceDsGraphe(n, i) < D[i]) {
					D[i] = D[n] + distanceDsGraphe(n, i);
					R[i] = n;
				}
			}
		}
	}

	private int distanceDsGraphe(int t, int s) {
		if (g0.existeArc(t, s)) {
			return g0.getU()[t][s];
		} else {
			return INFINITE;
		}
	}

	public int choixSommet() {
		int valeurMin = INFINITE;
		int min = x0;
		for (int i = 0; i < dimMatr; i++) {
			if (!noeudsMarqués[i])
				if (D[i] <= valeurMin) {
					min = i;
					valeurMin = D[i];
				}
		}
		return min;
	}


	//fonction à définir :S.contains(i)
	private boolean contains(int[] S, int i) {
		return noeudsMarqués[i];
	}

	public int getLongueurChemin(int i) {
		return D[i];
	}

	public void longueurChemin(int i) {

		int d = D[i];

		int metre = d % 1000;
		int km = (d / 1000) % 1000;

		String metreString = Integer.toString(metre);
		String kmString = Integer.toString(km);
		System.out.print(kmString + " km " + metreString + " m ");


	}

	public String longueurCheminString(int i) {
		String res;

		int d = D[i];

		int metre = d % 1000;
		int km = (d / 1000) % 1000;

		String metreString = Integer.toString(metre);
		String kmString = Integer.toString(km);
		res = "<html>" + kmString + " km " + "<br>" + metreString + " m" + "</html>";
		return (res);


	}

	public int getDureeChemin(int i) {

		return D[i];
	}

	public void dureeChemin(int i) {
		double s = D[i] / (double) 1.77778;

		int sec = (int) s % 60;
		int min = ((int) s / 60) % 60;
		int hours = ((int) s / 60) / 60;

		String strSec = (sec < 10) ? "0" + Integer.toString(sec) : Integer.toString(sec);
		String strmin = (min < 10) ? "0" + Integer.toString(min) : Integer.toString(min);
		String strHours = (hours < 10) ? "0" + Integer.toString(hours) : Integer.toString(hours);

		System.out.print(strHours + " h " + strmin + " min " + strSec + " sec");

	}

	public String dureeCheminString(int i) {
		String res;
		double s = D[i] / (double) 1.77778;

		int sec = (int) s % 60;
		int min = ((int) s / 60) % 60;
		int hours = ((int) s / 60) / 60;

		String strSec = (sec < 10) ? "0" + Integer.toString(sec) : Integer.toString(sec);
		String strmin = (min < 10) ? "0" + Integer.toString(min) : Integer.toString(min);
		String strHours = (hours < 10) ? "0" + Integer.toString(hours) : Integer.toString(hours);

		res = "<html>" + strmin + " min " + strSec + "</html>";
		//res="<html>" + strHours + " h " +"<br>" + strmin + " min " + strSec  + "</html>";
		return res;

	}

	public double getcalculCalories(int i) {
		return (double) D[i] / 1000 * 52.5;
	}

	public void calculCalories(int i) {
		System.out.print(String.format("%.2f", ((double) D[i] / 1000 * 52.5)) + " cal");
	}

	public String calculCaloriesString(int i) {
		String res;
		res = "<html>" + String.format("%.2f", ((double) D[i] / 1000 * 52.5)) + " cal" + "<html>";
		return res;
	}

	;


	//fonction à définir min
	private int min(int i, int j) {
		if (i <= j)
			return i;
		else return j;
	}

	public void afficheChemin(int i) {
		ArrayList<Integer> coordXaDessiner = new ArrayList<Integer>();
		ArrayList<Integer> coordYaDessiner = new ArrayList<Integer>();
		ArrayList<Integer> cheminInt = new ArrayList<Integer>();
		//int j=0;

		/*do{
			integers.add(int.nextInt());
			j++;
		}while( (integers.get(j-1) >= 1) || (integers.get(j-1) <= 100) );
		*/

		int source = x0;
		int antécédent = i;
		Vector<Integer> lesNoeudsIntermediaires = new Vector<Integer>();
		;
		System.out.println("Chemin de " + this.nomDest[source] + " à " + this.nomDest[antécédent] + ":");

		/*for(int inc=0;inc<matCoordX[source][antécédent].length;inc++){
			coordXaDessiner.add(matCoordX[source][antécédent][inc]);
			coordYaDessiner.add(matCoordY[source][antécédent][inc]);
		}*/

		while (antécédent != source) {
			lesNoeudsIntermediaires.add(antécédent);
			//System.out.println(Math.abs(R[antécédent]));
			antécédent = R[antécédent];
		}
		lesNoeudsIntermediaires.add(source);
		System.out.print(this.nomDest[lesNoeudsIntermediaires.get(lesNoeudsIntermediaires.size() - 1)]);
		cheminInt.add(lesNoeudsIntermediaires.get(lesNoeudsIntermediaires.size() - 1));

		for (int j = lesNoeudsIntermediaires.size() - 2; j > 0; j--) {
			System.out.print(" --> " + this.nomDest[lesNoeudsIntermediaires.get(j)]);
			cheminInt.add(lesNoeudsIntermediaires.get(j));

			/*for(int inc=0;inc<matCoordX[lesNoeudsIntermediaires.get(j-1)][lesNoeudsIntermediaires.get(j)].length;inc++){
				coordXaDessiner.add(matCoordX[lesNoeudsIntermediaires.get(j-1)][lesNoeudsIntermediaires.get(j)][inc]);
				coordYaDessiner.add(matCoordY[lesNoeudsIntermediaires.get(j-1)][lesNoeudsIntermediaires.get(j)][inc]);
			}*/
		}
		System.out.print(" --> " + nomDest[i]);
		cheminInt.add(i);

		System.out.println();

		for(Integer unInt :cheminInt){
			System.out.println(unInt);
		}
		/*coordXSuite=new int[1][cheminInt.size()-1][];
		coordYSuite=new int[1][cheminInt.size()-1][];*/
		listX = new LinkedList<LinkedList<Integer>>();
		listY = new LinkedList<LinkedList<Integer>>();


		for(int inc3=1;inc3<cheminInt.size();inc3++){
			LinkedList<Integer> listXn=new LinkedList<Integer>();
			LinkedList<Integer> listYn=new LinkedList<Integer>();
			for(int inc5=0;inc5<matCoordX[cheminInt.get(inc3-1)][cheminInt.get(inc3)].length;inc5++){
				listXn.add(matCoordX[cheminInt.get(inc3-1)][cheminInt.get(inc3)][inc5]);
				listYn.add(matCoordY[cheminInt.get(inc3-1)][cheminInt.get(inc3)][inc5]);
			}
			listX.add(listXn);
			listY.add(listYn);

			/*coordXSuite[1][inc3]=matCoordX[cheminInt.get(inc3-1)][cheminInt.get(inc3)];
			System.out.println(coordXSuite[1][inc3]);
			coordYSuite[1][inc3]=matCoordY[cheminInt.get(inc3-1)][cheminInt.get(inc3)];
			System.out.println(coordYSuite[1][inc3]);*/
		}

		/*int[][][][] coordXYSuite=new int[2][][][];
		coordXYSuite[0]=coordXSuite;
		coordXYSuite[1]=coordYSuite;*/


		/*for(int inc=0;inc<cheminInt.size()-1;inc++){
			for(int inc2=0;inc2<matCoordY[cheminInt.get(inc)][cheminInt.get(inc+1)].length;inc2++) {
				coordXaDessiner.add(matCoordX[cheminInt.get(inc)][cheminInt.get(inc + 1)][inc2]);
				coordYaDessiner.add(matCoordY[cheminInt.get(inc)][cheminInt.get(inc + 1)][inc2]);
			}
		}/*
		//coordYaDessiner.remove(coordYaDessiner.size());
		//coordXaDessiner.remove(coordXaDessiner.size());

		int[] coordXaRenvoyerTemp=new int[coordXaDessiner.size()];
		int[] coordYaRenvoyerTemp=new int[coordXaDessiner.size()];
		for(int inc3=0;inc3<coordXaDessiner.size();inc3++){
			coordXaRenvoyerTemp[inc3]=coordXaDessiner.get(inc3);
			coordYaRenvoyerTemp[inc3]=coordYaDessiner.get(inc3);
		}
		coordXaRenvoyer=coordXaRenvoyerTemp;
		coordYaRenvoyer=coordYaRenvoyerTemp;

		//int[][] coordXetY = {coordYaRenvoyer, coordYaRenvoyer};




		/*for(Integer unInt : cheminInt){
			for(matCoordY[])
			coordXaDessiner.add();
			coordYaDessiner.add()
		}*/


/*
		int[] coordXdessiner = new int[coordXaDessiner.size()];
		int[] coordYdessiner = new int[coordXaDessiner.size()];
		for (int k = 0; k < coordXaDessiner.size(); k++) {
			coordXdessiner[k] = coordXaDessiner.get(k);
			coordYdessiner[k] = coordYaDessiner.get(k);
			//}
			int[][] coordXetY = {coordXdessiner, coordYdessiner};



		}*/


	}

}